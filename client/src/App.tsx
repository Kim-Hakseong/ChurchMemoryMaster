import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { LocalStorage } from "@/lib/storage";
import { ExcelParser } from "@/lib/excel-parser";
import { scheduleEventCleaning } from "@/lib/calendar-cleaner";
import NotFound from "@/pages/not-found";
import Home from "@/pages/home";
import Calendar from "@/pages/calendar";
import AgeGroup from "@/pages/age-group";
import MonthlyVerse from "@/pages/monthly-verse";
import SettingsPage from "@/pages/settings";
import SplashPage from "@/pages/splash";
import SplashScreen from "@/components/splash-screen";
import ScrollToTop from "@/components/scroll-to-top";
import { useEffect, useState } from "react";
import { rescheduleFromLocalStorage } from "@/lib/notifications";

function Router() {
  return (
    <Switch>
      <Route path="/" component={() => <AgeGroup />} />
      <Route path="/kindergarten" component={() => <AgeGroup />} />
      <Route path="/elementary" component={() => <AgeGroup />} />
      <Route path="/youth" component={() => <AgeGroup />} />
      <Route path="/age-group/:group" component={AgeGroup} />
      <Route path="/monthly-verse" component={MonthlyVerse} />
      <Route path="/home" component={Home} />
      <Route path="/calendar" component={Calendar} />
      <Route path="/settings" component={SettingsPage} />
      <Route path="/splash" component={SplashPage} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  const [showSplash, setShowSplash] = useState(true);
  const [dataLoaded, setDataLoaded] = useState(false);

  // Ïï± ÏãúÏûëÏãú seed.json Ïö∞ÏÑ† Î°úÎìú(Ïã§Ìå® Ïãú Í∏∞Ï°¥ ÏóëÏÖÄ/Ìè¥Î∞± Ïàú)
  useEffect(() => {
    const loadExcelData = async () => {
      try {
        console.log('üìö ÍµêÌöå ÏïîÏÜ°Íµ¨Ï†à Ïï± ÏãúÏûë...');
        
        // üìÅ ÌååÏùº ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî (clearAll Ï†ÑÏóê!)
        await LocalStorage.initializeEvents();
        console.log('‚úÖ ÌååÏùº ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        
        // üîÑ ÏµúÏã† Ïù¥Î≤§Ìä∏ Ï∫êÏãú Î°úÎìú
        await LocalStorage.getEvents();
        console.log('‚úÖ Ïù¥Î≤§Ìä∏ Ï∫êÏãú Î°úÎìú ÏôÑÎ£å');
        
        // Í∏∞Ï°¥ Íµ¨Ï†à Îç∞Ïù¥ÌÑ∞Îßå ÌÅ¥Î¶¨Ïñ¥ (Ïù¥Î≤§Ìä∏Îäî Î≥¥Ï°¥)
        LocalStorage.clearAll();
        
        // 1) Ï≤´ ÏÑ§Ïπò Ïãú Ïù¥Î≤§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÎã§Î©¥ ÏãúÎìú ‚Üí Í≥ºÍ±∞ ÏùºÏ†ï Ï†ïÎ¶¨ ‚Üí ÏòÅÍµ¨ Ï†ÄÏû•
        // seed Î≤ÑÏ†ÑÏù¥ Î∞îÎÄåÎ©¥ Í∞ïÏ†ú Ïû¨ÏãúÎìú (ÏóëÏÖÄ Î≥ÄÍ≤Ω Î∞òÏòÅ)
        const storedSeedVersion = localStorage.getItem('cm_seed_version');
        const existingEvents = await LocalStorage.getEvents();
        let needsSeed = (!existingEvents || existingEvents.length === 0);

        if (needsSeed) {
          try {
            const seedResp = await fetch('/seed.json', { headers: { 'Cache-Control': 'no-cache' } });
            if (seedResp.ok) {
              const seed = await seedResp.json();
              if (seed.seedVersion && seed.seedVersion !== storedSeedVersion) {
                needsSeed = true;
              }
              if (Array.isArray(seed.verses) && seed.verses.length > 0) {
                LocalStorage.saveVerses(seed.verses);
              }
              if (Array.isArray(seed.monthlyVerses) && seed.monthlyVerses.length > 0) {
                LocalStorage.saveMonthlyVerses(seed.monthlyVerses);
              }
              if (Array.isArray(seed.events) && seed.events.length > 0) {
                await LocalStorage.saveEvents(seed.events);
              }
              console.log(`‚úÖ seed.json Ï†ÅÏö© ÏôÑÎ£å: v=${seed.verses?.length ?? 0}, m=${seed.monthlyVerses?.length ?? 0}, e=${seed.events?.length ?? 0}`);
              if (seed.seedVersion) {
                localStorage.setItem('cm_seed_version', seed.seedVersion);
              }
            }
          } catch (e) {
            console.log('‚ö†Ô∏è seed.json ÏóÜÏùå ÎòêÎäî Î°úÎìú Ïã§Ìå®, ÏóëÏÖÄ Î°úÎìúÎ°ú Ìè¥Î∞±');
          }
        }

        // 2) ÏóëÏÖÄ ÌååÏùº Ìè¥Î∞± Î°úÎìú (iOS WebViewÏóêÏÑúÎèÑ Ï†ëÍ∑º Í∞ÄÎä•Ìïú ÏÉÅÎåÄ Í≤ΩÎ°ú)
        const excelUrl = `/church_verses.xlsx`;
        const calendarUrl = `/calendar_events.xlsx`;
        
        try {
          const response = await fetch(excelUrl, {
            method: 'GET',
            headers: { 'Cache-Control': 'no-cache' },
          });
          
          if (response.ok) {
            const blob = await response.blob();
            const file = new File([blob], 'church_verses.xlsx', { 
              type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
            });
            
            const result = await ExcelParser.parseFile(file);
            console.log(`‚úÖ ÏïîÏÜ°Íµ¨Ï†à Î°úÎìú ÏôÑÎ£å: ${result.verses.length}Í∞ú Íµ¨Ï†à, ${result.monthlyVerses.length}Í∞ú ÏõîÏïîÏÜ°`);
            
            if (result.verses.length === 0) {
              throw new Error('ÏïîÏÜ° ÎßêÏîÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
            }
          } else {
            throw new Error(`ÏïîÏÜ° ÎßêÏîÄ ÌååÏùº Î°úÎìú Ïã§Ìå®: ${response.status}`);
          }

          // Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ ÌååÏùº Î°úÎìú (Ï≤´ ÏÑ§Ïπò ÏãúÏóêÎßå)
          if (needsSeed) {
            try {
              const calendarResponse = await fetch(calendarUrl, {
                method: 'GET',
                headers: { 'Cache-Control': 'no-cache' },
              });
              
              if (calendarResponse.ok) {
                const calendarBlob = await calendarResponse.blob();
                const calendarFile = new File([calendarBlob], 'calendar_events.xlsx', { 
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
                });
                
                const calendarEvents = await ExcelParser.parseCalendarFile(calendarFile);
                console.log(`‚úÖ Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ Î°úÎìú ÏôÑÎ£å: ${calendarEvents.length}Í∞ú`);
              }
            } catch (calendarError) {
              console.log('‚ö†Ô∏è Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ ÌååÏùº Î°úÎìú Ïã§Ìå® (ÏÑ†ÌÉùÏÇ¨Ìï≠)');
            }
          }
          
        } catch (fetchError) {
          console.error('‚ùå ÏóëÏÖÄ ÌååÏùº Î°úÎìú Ïã§Ìå®:', fetchError);
          console.log('üîÑ Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î°ú Ïã§Ìñâ...');
          
          // 3) ÏµúÏ¢Ö Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Î°úÎìú
          LocalStorage.loadFallbackData();
          setDataLoaded(true);
          queryClient.invalidateQueries();
          return;
        }
        
        // ÏãúÏûë ÌôîÎ©¥ ÏÑ§Ï†ï Ï†ÅÏö©
        try {
          const start = localStorage.getItem('cm_start');
          if (start) {
            const path = start === 'home' ? '/home' :
              start === 'elementary' ? '/elementary' :
              start === 'kindergarten' ? '/kindergarten' :
              start === 'youth' ? '/youth' : '/calendar';
            if (window.location.pathname === '/' && path) {
              window.history.replaceState({}, '', path);
            }
          }
        } catch {}

        // 1ÌöåÏÑ±: ÏãúÎìú ÏßÅÌõÑ Í≥ºÍ±∞ ÏùºÏ†ï Ï†ïÎ¶¨ Î∞è ÏôÑÎ£å ÌîåÎûòÍ∑∏ Ï†ÄÏû•
        try {
          if (needsSeed) {
            // Í≥ºÍ±∞ ÏùºÏ†ï Ï†ïÎ¶¨
            scheduleEventCleaning();
            // Ï¶âÏãú Ìïú Î≤à Ïã§ÌñâÏùÄ scheduleEventCleaning ÎÇ¥Î∂ÄÏóêÏÑú Ï≤òÎ¶¨Îê®
            localStorage.setItem('cm_events_seeded', '1');
          }
        } catch {}

        // ÏµúÏ¢Ö Î≥¥Ï¶ù: Ïù¥Î≤§Ìä∏Í∞Ä Ïó¨Ï†ÑÌûà 0Í∞úÎ©¥ Ìè¥Î∞± ÏÉùÏÑ± ÌõÑ Ï†ÄÏû•
        try {
          const afterSeedEvents = await LocalStorage.getEvents();
          if (!afterSeedEvents || afterSeedEvents.length === 0) {
            console.log('‚ö†Ô∏è Ïù¥Î≤§Ìä∏ 0Í∞ú Í∞êÏßÄ ‚Üí Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ Ï£ºÏûÖ');
            LocalStorage.loadFallbackData();
          }
        } catch {}

        // UI ÏóÖÎç∞Ïù¥Ìä∏
        setDataLoaded(true);
        queryClient.invalidateQueries();
        
        // ÏßÄÎÇú ÏùºÏ†ï ÏûêÎèô ÏÇ≠Ï†ú Ïä§ÏºÄÏ§ÑÎü¨ ÏãúÏûë(ÏÉÅÏãú)
        if (!needsSeed) {
          scheduleEventCleaning();
        }

        // ÏïåÎ¶º Ïä§ÏºÄÏ§Ñ Ïû¨Îì±Î°ù (Ïï± ÏãúÏûë/Ïû¨ÏãúÏûë Ïãú)
        await rescheduleFromLocalStorage();
        
        console.log('üéâ Ïï± Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        
      } catch (error) {
        console.error('‚ùå Ïï± ÏãúÏûë Ï§ë Ïò§Î•ò:', error);
        setDataLoaded(true); // Ïò§Î•òÍ∞Ä ÏûàÏñ¥ÎèÑ Ïï±ÏùÄ Í≥ÑÏÜç Ïã§Ìñâ
      }
    };

    loadExcelData();
  }, []);

  const handleSplashComplete = () => {
    setShowSplash(false);
  };

  // Ïä§ÌîåÎûòÏãú Ïä§ÌÅ¨Î¶∞ ÌëúÏãú
  if (showSplash) {
    return <SplashScreen onComplete={handleSplashComplete} />;
  }

  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <div className="w-full min-h-screen bg-white relative overflow-hidden">
          <div className="absolute inset-0 pointer-events-none" style={{background: 'linear-gradient(135deg, hsl(251, 82%, 67%, 0.05), transparent, hsl(166, 73%, 45%, 0.05))'}}></div>
          <div className="pb-20">
            <ScrollToTop />
            <Router />
          </div>
          <Toaster />
        </div>
      </TooltipProvider>
    </QueryClientProvider>
  );
}

export default App;
